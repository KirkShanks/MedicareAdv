setwd("C:\\Users\\Kirk\\Documents\\Coursera\\Course 9 - Developing Data Products")
library(shiny)
library(shinyapps)
library(knitr)
library(maps)
library(mapproj)
# http://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/MCRAdvPartDEnrolData/MA-State-County-Penetration-Items/MA-State-County-Penetration-2014-09.html
# http://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/MCRAdvPartDEnrolData/Downloads/2014/Sept/State-County-Penetration-MA-2014-09.zip
MedicareAdv <- read.csv("./MedicareAdv/data/State_County_Penetration_MA_2014_09.csv")
SSA <- read.csv("./MedicareAdv/data/SSA by StateCounty.csv")
MSA <- read.csv("./MedicareAdv/data/List1.csv")
summary(MedicareAdv)
str(MedicareAdv)
head(MedicareAdv)
# Remove characters and make fields numeric
MedicareAdv$Penetration <- as.numeric(gsub(pattern = "%", x = MedicareAdv$Penetration,
replacement = ""))
MedicareAdv$Enrolled <- as.numeric(gsub(pattern = ",", x = MedicareAdv$Enrolled,
replacement = ""))
MedicareAdv$Enrolled <- as.numeric(MedicareAdv$Enrolled)
MedicareAdv$Eligibles <- as.numeric(gsub(pattern = ",", x = MedicareAdv$Eligibles,
replacement = ""))
MedicareAdv$Eligibles <- as.numeric(MedicareAdv$Eligibles)
MedicareAdv$FIPS <- as.character(MedicareAdv$FIPS)
MedicareAdv$SSA <- as.character(MedicareAdv$SSA)
SSA$SSA <- as.character(SSA$SSA)
MSA$FIPS.State.Code <- as.character(MSA$FIPS.State.Code)
MSA$FIPS.County.Code <- as.character(MSA$FIPS.County.Code)
# Make all NAs == 0
MedicareAdv$Penetration[is.na(MedicareAdv$Penetration)] <- 0
MedicareAdv$Enrolled[is.na(MedicareAdv$Enrolled)] <- 0
MedicareAdv$Eligibles[is.na(MedicareAdv$Eligibles)] <- 0
# Remove "Pending" row
MedicareAdv <- MedicareAdv[-1,]
for (i in 1:length(MedicareAdv$FIPS) )
{
if  (nchar(MedicareAdv$FIPS[i]) < 5)
{
MedicareAdv$FIPS[i] <- paste("0",MedicareAdv$FIPS[i], sep = "")
}
}
for (i in 1:length(MedicareAdv$SSA) )
{
if  (nchar(MedicareAdv$SSA[i]) < 5)
{
MedicareAdv$SSA[i] <- paste("0",MedicareAdv$SSA[i], sep = "")
}
}
for (i in 1:length(SSA$SSA) )
{
if  (nchar(SSA$SSA[i]) < 5)
{
SSA$SSA[i] <- paste("0",SSA$SSA[i], sep = "")
}
}
for (i in 1:length(MSA$FIPS.State.Code) )
{
if  (nchar(MSA$FIPS.State.Code[i]) < 2)
{
MSA$FIPS.State.Code[i] <- paste("0",MSA$FIPS.State.Code[i], sep = "")
}
}
for(j in 1:2){
for (i in 1:length(MSA$FIPS.County.Code) )
{
if  (nchar(MSA$FIPS.County.Code[i]) < 3)
{
MSA$FIPS.County.Code[i] <- paste("0",MSA$FIPS.County.Code[i], sep = "")
}
}
}
MSA$FIPS <- paste(MSA$FIPS.State.Code,MSA$FIPS.County.Code, sep = "")
# Remove un-needed columns
MedicareAdv <- MedicareAdv[,c(1,2,5,8,9,10,11)]
# Add state abbreviations
MedicareAdv <- merge(MedicareAdv, SSA[,1:2], by = "SSA")
MedicareAdv <- MedicareAdv[,c(1,4,2,8,3,5,6,7)]
MSA <- MSA[complete.cases(MSA[,c(1,4,5,12,13)]),]
MedicareAdv <- merge(MedicareAdv, MSA[,c(1,4,5,12,13)], by = "FIPS")
CBSA <- unique(MedicareAdv[,9:10])
MA.Enrolled.CBSA <- as.data.frame(t(sapply(split(MedicareAdv[,6:7], MedicareAdv[,9]), colSums)))
MA.Enrolled.CBSA <- cbind(CBSA.Code = rownames(MA.Enrolled.CBSA), MA.Enrolled.CBSA)
MA.Enrolled.CBSA <- merge(MA.Enrolled.CBSA, CBSA, by = "CBSA.Code")
MA.Enrolled.CBSA <- MA.Enrolled.CBSA[,c(1,4,2,3)]
MA.Enrolled.CBSA$Penetration <- round(MA.Enrolled.CBSA$Enrolled/MA.Enrolled.CBSA$Eligibles, digits = 3)
#########################################################
## Ranking samples - maybe use this for the project?? ##
#########################################################
rank(MA.Enrolled.CBSA[which(MA.Enrolled.CBSA$Penetration < 0.15 & MA.Enrolled.CBSA$Eligibles > 10000),4])
MA.Enrolled.CBSA[MA.Enrolled.CBSA$Penetration < 0.15,]
summary(MA.Enrolled.CBSA)
str(MA.Enrolled.CBSA)
head(MA.Enrolled.CBSA)
tail(MA.Enrolled.CBSA)
dimnames(MA.Enrolled.CBSA)
# row.names(MA.Enrolled.CBSA) <- MA.Enrolled.CBSA$CBSA.Code
rownames(MA.Enrolled.CBSA)
names(MA.Enrolled.CBSA)
colnames(MA.Enrolled.CBSA)
# Summary Commands
sum(MA.Enrolled.CBSA$Eligibles)
max(MA.Enrolled.CBSA$Eligibles)
mean(MA.Enrolled.CBSA$Eligibles)
median(MA.Enrolled.CBSA$Eligibles)
min(MA.Enrolled.CBSA$Eligibles)
length(MA.Enrolled.CBSA$Eligibles)
sd(MA.Enrolled.CBSA$Eligibles)
var(MA.Enrolled.CBSA$Eligibles)
summary(MA.Enrolled.CBSA$Eligibles)
quantile(MA.Enrolled.CBSA$Eligibles)
quantile(MA.Enrolled.CBSA$Eligibles, 0.2)
quantile(MA.Enrolled.CBSA$Eligibles, c(0.2,0.5,0.8), names=FALSE)
cumsum(MA.Enrolled.CBSA$Eligibles)
cummax(MA.Enrolled.CBSA$Eligibles)
cummin(MA.Enrolled.CBSA$Eligibles)
cumprod(MA.Enrolled.CBSA$Penetration)
# Cummulative penetration
cumsum(MA.Enrolled.CBSA$Enrolled)/cumsum(MA.Enrolled.CBSA$Eligibles)
# Running Average
cumsum(MA.Enrolled.CBSA$Eligibles)/seq(MA.Enrolled.CBSA$Eligibles)
# Histogram of penetration
graphics.off()
hist(MA.Enrolled.CBSA$Penetration
, col = "aquamarine4"
, main = "MA Penetration by CBSA"
, xlab = "% Penetration"
, ylim = c(0,300)
, breaks = 10
)
x <- mean(MA.Enrolled.CBSA$Penetration)
v <- median(MA.Enrolled.CBSA$Penetration)
abline(v = x, col = "yellow", lwd = 2)
abline(v = v, col = "red", lwd = 2)
legend("topright" # location top, center, bottom, topright, bottomright, right, topleft, bottomleft, left
, c("mean","median", "density") # label names
, lty = c(1,1,1) # lines
, lwd = c(2,2,2) # line width
, col = c("yellow","red","orange") # line colors
)
# Add a density plot for s&g
lines(x=density(MA.Enrolled.CBSA$Penetration)[[1]]
,y = density(MA.Enrolled.CBSA$Penetration)[[2]]*100
,lwd = 2
, col = "orange")
# Set the working directory
setwd("C:\\Users\\Kirk\\Documents\\Coursera\\Course 9 - Developing Data Products")
library(shiny)
library(shinyapps)
library(knitr)
library(maps)
library(mapproj)
# http://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/MCRAdvPartDEnrolData/MA-State-County-Penetration-Items/MA-State-County-Penetration-2014-09.html
# http://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/MCRAdvPartDEnrolData/Downloads/2014/Sept/State-County-Penetration-MA-2014-09.zip
MedicareAdv <- read.csv("./MedicareAdv - working/data/State_County_Penetration_MA_2014_09.csv")
SSA <- read.csv("./MedicareAdv - working/data/SSA by StateCounty.csv")
MSA <- read.csv("./MedicareAdv - working/data/List1.csv")
summary(MedicareAdv)
str(MedicareAdv)
head(MedicareAdv)
# Remove characters and make fields numeric
MedicareAdv$Penetration <- as.numeric(gsub(pattern = "%", x = MedicareAdv$Penetration,
replacement = ""))
MedicareAdv$Enrolled <- as.numeric(gsub(pattern = ",", x = MedicareAdv$Enrolled,
replacement = ""))
MedicareAdv$Enrolled <- as.numeric(MedicareAdv$Enrolled)
MedicareAdv$Eligibles <- as.numeric(gsub(pattern = ",", x = MedicareAdv$Eligibles,
replacement = ""))
MedicareAdv$Eligibles <- as.numeric(MedicareAdv$Eligibles)
MedicareAdv$FIPS <- as.character(MedicareAdv$FIPS)
MedicareAdv$SSA <- as.character(MedicareAdv$SSA)
SSA$SSA <- as.character(SSA$SSA)
MSA$FIPS.State.Code <- as.character(MSA$FIPS.State.Code)
MSA$FIPS.County.Code <- as.character(MSA$FIPS.County.Code)
# Make all NAs == 0
MedicareAdv$Penetration[is.na(MedicareAdv$Penetration)] <- 0
MedicareAdv$Enrolled[is.na(MedicareAdv$Enrolled)] <- 0
MedicareAdv$Eligibles[is.na(MedicareAdv$Eligibles)] <- 0
# Remove "Pending" row
MedicareAdv <- MedicareAdv[-1,]
for (i in 1:length(MedicareAdv$FIPS) )
{
if  (nchar(MedicareAdv$FIPS[i]) < 5)
{
MedicareAdv$FIPS[i] <- paste("0",MedicareAdv$FIPS[i], sep = "")
}
}
for (i in 1:length(MedicareAdv$SSA) )
{
if  (nchar(MedicareAdv$SSA[i]) < 5)
{
MedicareAdv$SSA[i] <- paste("0",MedicareAdv$SSA[i], sep = "")
}
}
for (i in 1:length(SSA$SSA) )
{
if  (nchar(SSA$SSA[i]) < 5)
{
SSA$SSA[i] <- paste("0",SSA$SSA[i], sep = "")
}
}
for (i in 1:length(MSA$FIPS.State.Code) )
{
if  (nchar(MSA$FIPS.State.Code[i]) < 2)
{
MSA$FIPS.State.Code[i] <- paste("0",MSA$FIPS.State.Code[i], sep = "")
}
}
for(j in 1:2){
for (i in 1:length(MSA$FIPS.County.Code) )
{
if  (nchar(MSA$FIPS.County.Code[i]) < 3)
{
MSA$FIPS.County.Code[i] <- paste("0",MSA$FIPS.County.Code[i], sep = "")
}
}
}
MSA$FIPS <- paste(MSA$FIPS.State.Code,MSA$FIPS.County.Code, sep = "")
# Remove un-needed columns
MedicareAdv <- MedicareAdv[,c(1,2,5,8,9,10,11)]
# Add state abbreviations
MedicareAdv <- merge(MedicareAdv, SSA[,1:2], by = "SSA")
MedicareAdv <- MedicareAdv[,c(1,4,2,8,3,5,6,7)]
MSA <- MSA[complete.cases(MSA[,c(1,4,5,12,13)]),]
MedicareAdv <- merge(MedicareAdv, MSA[,c(1,4,5,12,13)], by = "FIPS")
CBSA <- unique(MedicareAdv[,9:10])
MA.Enrolled.CBSA <- as.data.frame(t(sapply(split(MedicareAdv[,6:7], MedicareAdv[,9]), colSums)))
MA.Enrolled.CBSA <- cbind(CBSA.Code = rownames(MA.Enrolled.CBSA), MA.Enrolled.CBSA)
MA.Enrolled.CBSA <- merge(MA.Enrolled.CBSA, CBSA, by = "CBSA.Code")
MA.Enrolled.CBSA <- MA.Enrolled.CBSA[,c(1,4,2,3)]
MA.Enrolled.CBSA$Penetration <- round(MA.Enrolled.CBSA$Enrolled/MA.Enrolled.CBSA$Eligibles, digits = 3)
#########################################################
## Ranking samples - maybe use this for the project?? ##
#########################################################
rank(MA.Enrolled.CBSA[which(MA.Enrolled.CBSA$Penetration < 0.15 & MA.Enrolled.CBSA$Eligibles > 10000),4])
MA.Enrolled.CBSA[MA.Enrolled.CBSA$Penetration < 0.15,]
summary(MA.Enrolled.CBSA)
str(MA.Enrolled.CBSA)
head(MA.Enrolled.CBSA)
tail(MA.Enrolled.CBSA)
dimnames(MA.Enrolled.CBSA)
# row.names(MA.Enrolled.CBSA) <- MA.Enrolled.CBSA$CBSA.Code
rownames(MA.Enrolled.CBSA)
names(MA.Enrolled.CBSA)
colnames(MA.Enrolled.CBSA)
# Summary Commands
sum(MA.Enrolled.CBSA$Eligibles)
max(MA.Enrolled.CBSA$Eligibles)
mean(MA.Enrolled.CBSA$Eligibles)
median(MA.Enrolled.CBSA$Eligibles)
min(MA.Enrolled.CBSA$Eligibles)
length(MA.Enrolled.CBSA$Eligibles)
sd(MA.Enrolled.CBSA$Eligibles)
var(MA.Enrolled.CBSA$Eligibles)
summary(MA.Enrolled.CBSA$Eligibles)
quantile(MA.Enrolled.CBSA$Eligibles)
quantile(MA.Enrolled.CBSA$Eligibles, 0.2)
quantile(MA.Enrolled.CBSA$Eligibles, c(0.2,0.5,0.8), names=FALSE)
cumsum(MA.Enrolled.CBSA$Eligibles)
cummax(MA.Enrolled.CBSA$Eligibles)
cummin(MA.Enrolled.CBSA$Eligibles)
cumprod(MA.Enrolled.CBSA$Penetration)
# Cummulative penetration
cumsum(MA.Enrolled.CBSA$Enrolled)/cumsum(MA.Enrolled.CBSA$Eligibles)
# Running Average
cumsum(MA.Enrolled.CBSA$Eligibles)/seq(MA.Enrolled.CBSA$Eligibles)
# Histogram of penetration
graphics.off()
hist(MA.Enrolled.CBSA$Penetration
, col = "aquamarine4"
, main = "MA Penetration by CBSA"
, xlab = "% Penetration"
, ylim = c(0,300)
, breaks = 10
)
x <- mean(MA.Enrolled.CBSA$Penetration)
v <- median(MA.Enrolled.CBSA$Penetration)
abline(v = x, col = "yellow", lwd = 2)
abline(v = v, col = "red", lwd = 2)
legend("topright" # location top, center, bottom, topright, bottomright, right, topleft, bottomleft, left
, c("mean","median", "density") # label names
, lty = c(1,1,1) # lines
, lwd = c(2,2,2) # line width
, col = c("yellow","red","orange") # line colors
)
# Add a density plot for s&g
lines(x=density(MA.Enrolled.CBSA$Penetration)[[1]]
,y = density(MA.Enrolled.CBSA$Penetration)[[2]]*100
,lwd = 2
, col = "orange")
summary(MA.Enrolled.CBSA)
str(MA.Enrolled.CBSA)
tail(MA.Enrolled.CBSA)
dimnames(MA.Enrolled.CBSA)
sum(MA.Enrolled.CBSA$Eligibles)
summary(MA.Enrolled.CBSA$Eligibles)
fivenum(MA.Enrolled.CBSA$Eligibles)
colMeans(MA.Enrolled.CBSA[,3:5])
MA.Enrolled.CBSA <- cbind(MA.Enrolled.CBSA, bins = ceiling(MA.Enrolled.CBSA$Penetration*10)/10)
aggregate(MA.Enrolled.CBSA[,3:4], by=list(MA.Enrolled.CBSA$bins), FUN=sum)
by(MA.Enrolled.CBSA[,3:4], MA.Enrolled.CBSA$bins, FUN=colSums)
tapply(MA.Enrolled.CBSA[,3], MA.Enrolled.CBSA$bins, function(x) {sum(x)})
colsums(MA.Enrolled.CBSA[,3:4])
colSums(MA.Enrolled.CBSA[,3:4])
summary(MedicareAdv[,6:8])
getwd()
setwd("~")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
colSums(MA.Enrolled.CBSA$Eligibles)
?colsum
?colSums
MA.Enrolled.CBSA$Eligibles
colSums(MA.Enrolled.CBSA$Eligibles)
sum(MA.Enrolled.CBSA$Eligibles)
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
?round
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
?format
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
## use of nsmall
format(13.7)
format(13.7, nsmall = 3)
format(c(6.0, 13.1), digits = 2)
format(c(6.0, 13.1), digits = 2, nsmall = 1)
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
## use of nsmall
format(123456789, scientific = FALSE, big.mark=',')
format(123456789, scientific = FALSE, big.mark=',', small.mark='-')
format(123456789.0123, scientific = FALSE, big.mark=',', small.mark='-')
format(1234567.0123, scientific = FALSE, big.mark=',', small.mark='-')
format(1234567.0123, scientific = FALSE, big.mark=',', decimal.mark='-')
format(1234567.0123, scientific = FALSE, big.mark=',', decimal.mark='-', digits = 20)
format(1234567.0123, scientific = FALSE, big.mark=',', decimal.mark='-', digits = 3)
format(1234567.0123, scientific = FALSE, big.mark=',', decimal.mark='-', digits = 12
)
format(1234567.0123, scientific = FALSE, big.mark='.', decimal.mark=',', digits = 12)
format(1234567.0123, scientific = FALSE, big.mark=',', decimal.mark='.', digits = 12)
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
setwd("~/Coursera/Course 9 - Developing Data Products/MedicareAdv - working/Slidify")
# Create the slide
slidify("index.Rmd")
# Open the browser
browseURL("index.html")
